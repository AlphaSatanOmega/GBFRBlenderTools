# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Entities

from .flatbuffers import *
from .flatbuffers.compat import import_numpy
np = import_numpy()

class Bone(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = encode.Get(packer.uoffset, buf, offset)
        x = Bone()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBone(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Bone
    def Init(self, buf, pos):
        self._tab = table.Table(buf, pos)

    # Bone
    def A1(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .BoneInfo import BoneInfo
            obj = BoneInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def ParentId(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Bone
    def Name(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bone
    def Position(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def Quat(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .Quaternion import Quaternion
            obj = Quaternion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bone
    def Scale(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoneStart(builder):
    builder.StartObject(6)

def Start(builder):
    BoneStart(builder)

def BoneAddA1(builder, a1):
    builder.PrependStructSlot(0, number_types.UOffsetTFlags.py_type(a1), 0)

def AddA1(builder, a1):
    BoneAddA1(builder, a1)

def BoneAddParentId(builder, parentId):
    builder.PrependUint16Slot(1, parentId, 0)

def AddParentId(builder, parentId):
    BoneAddParentId(builder, parentId)

def BoneAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    BoneAddName(builder, name)

def BoneAddPosition(builder, position):
    builder.PrependStructSlot(3, number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    BoneAddPosition(builder, position)

def BoneAddQuat(builder, quat):
    builder.PrependStructSlot(4, number_types.UOffsetTFlags.py_type(quat), 0)

def AddQuat(builder, quat):
    BoneAddQuat(builder, quat)

def BoneAddScale(builder, scale):
    builder.PrependStructSlot(5, number_types.UOffsetTFlags.py_type(scale), 0)

def AddScale(builder, scale):
    BoneAddScale(builder, scale)

def BoneEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoneEnd(builder)
