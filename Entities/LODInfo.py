# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Entities

from .flatbuffers import *
from .flatbuffers.compat import import_numpy
np = import_numpy()

class LODInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = encode.Get(packer.uoffset, buf, offset)
        x = LODInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLODInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LODInfo
    def Init(self, buf, pos):
        self._tab = table.Table(buf, pos)

    # LODInfo
    def MeshBuffers(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += number_types.UOffsetTFlags.py_type(j) * 16
            from .MeshBufferLocator import MeshBufferLocator
            obj = MeshBufferLocator()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LODInfo
    def MeshBuffersLength(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LODInfo
    def MeshBuffersIsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # LODInfo
    def Chunks(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += number_types.UOffsetTFlags.py_type(j) * 12
            from .LODChunk import LODChunk
            obj = LODChunk()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LODInfo
    def ChunksLength(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LODInfo
    def ChunksIsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # LODInfo
    def VertCount(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LODInfo
    def PolyCountX3(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LODInfo
    def BufferTypes(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # LODInfo
    def A6(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

def LODInfoStart(builder):
    builder.StartObject(6)

def Start(builder):
    LODInfoStart(builder)

def LODInfoAddMeshBuffers(builder, meshBuffers):
    builder.PrependUOffsetTRelativeSlot(0, number_types.UOffsetTFlags.py_type(meshBuffers), 0)

def AddMeshBuffers(builder, meshBuffers):
    LODInfoAddMeshBuffers(builder, meshBuffers)

def LODInfoStartMeshBuffersVector(builder, numElems):
    return builder.StartVector(16, numElems, 8)

def StartMeshBuffersVector(builder, numElems: int) -> int:
    return LODInfoStartMeshBuffersVector(builder, numElems)

def LODInfoAddChunks(builder, chunks):
    builder.PrependUOffsetTRelativeSlot(1, number_types.UOffsetTFlags.py_type(chunks), 0)

def AddChunks(builder, chunks):
    LODInfoAddChunks(builder, chunks)

def LODInfoStartChunksVector(builder, numElems):
    return builder.StartVector(12, numElems, 4)

def StartChunksVector(builder, numElems: int) -> int:
    return LODInfoStartChunksVector(builder, numElems)

def LODInfoAddVertCount(builder, vertCount):
    builder.PrependInt32Slot(2, vertCount, 0)

def AddVertCount(builder, vertCount):
    LODInfoAddVertCount(builder, vertCount)

def LODInfoAddPolyCountX3(builder, polyCountX3):
    builder.PrependInt32Slot(3, polyCountX3, 0)

def AddPolyCountX3(builder, polyCountX3):
    LODInfoAddPolyCountX3(builder, polyCountX3)

def LODInfoAddBufferTypes(builder, bufferTypes):
    builder.PrependInt8Slot(4, bufferTypes, 0)

def AddBufferTypes(builder, bufferTypes):
    LODInfoAddBufferTypes(builder, bufferTypes)

def LODInfoAddA6(builder, a6):
    builder.PrependInt8Slot(5, a6, 0)

def AddA6(builder, a6):
    LODInfoAddA6(builder, a6)

def LODInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return LODInfoEnd(builder)
