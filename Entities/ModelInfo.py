# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Entities

from .flatbuffers import *
from .flatbuffers.compat import import_numpy
np = import_numpy()

class ModelInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = encode.Get(packer.uoffset, buf, offset)
        x = ModelInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModelInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ModelInfo
    def Init(self, buf, pos):
        self._tab = table.Table(buf, pos)

    # ModelInfo
    def Magic(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def Lodinfos(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LODInfo import LODInfo
            obj = LODInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def LodinfosLength(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def LodinfosIsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ModelInfo
    def Lodinfos2(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LODInfo import LODInfo
            obj = LODInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def Lodinfos2Length(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def Lodinfos2IsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ModelInfo
    def A4(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(number_types.Float32Flags, a + number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ModelInfo
    def A4AsNumpy(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(number_types.Float32Flags, o)
        return 0

    # ModelInfo
    def A4Length(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def A4IsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ModelInfo
    def SubMeshes(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .SubMeshInfo import SubMeshInfo
            obj = SubMeshInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def SubMeshesLength(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def SubMeshesIsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # ModelInfo
    def A6(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ModelInfo_A5 import ModelInfo_A5
            obj = ModelInfo_A5()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def A6Length(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def A6IsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ModelInfo
    def BonesToWeightIndices(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(number_types.Uint16Flags, a + number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ModelInfo
    def BonesToWeightIndicesAsNumpy(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(number_types.Uint16Flags, o)
        return 0

    # ModelInfo
    def BonesToWeightIndicesLength(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def BonesToWeightIndicesIsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ModelInfo
    def DeformBoneBoundaryBox(self, j):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += number_types.UOffsetTFlags.py_type(j) * 24
            from .BoundaryBox import BoundaryBox
            obj = BoundaryBox()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def DeformBoneBoundaryBoxLength(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def DeformBoneBoundaryBoxIsNone(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # ModelInfo
    def A9(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec4 import Vec4
            obj = Vec4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def A10(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .ModelInfo_A10 import ModelInfo_A10
            obj = ModelInfo_A10()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def A11(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            from .ModelInfo_A11 import ModelInfo_A11
            obj = ModelInfo_A11()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def A12(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A13(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A14(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A15(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A16(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A17(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A18(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A19(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A20(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelInfo
    def A21(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A22(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A23(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A24(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A25(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A26(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A27(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A28(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A29(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A30(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A31(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def A32(self):
        o = number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ModelInfoStart(builder):
    builder.StartObject(32)

def Start(builder):
    ModelInfoStart(builder)

def ModelInfoAddMagic(builder, magic):
    builder.PrependUint32Slot(0, magic, 0)

def AddMagic(builder, magic):
    ModelInfoAddMagic(builder, magic)

def ModelInfoAddLodinfos(builder, lodinfos):
    builder.PrependUOffsetTRelativeSlot(1, number_types.UOffsetTFlags.py_type(lodinfos), 0)

def AddLodinfos(builder, lodinfos):
    ModelInfoAddLodinfos(builder, lodinfos)

def ModelInfoStartLodinfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLodinfosVector(builder, numElems: int) -> int:
    return ModelInfoStartLodinfosVector(builder, numElems)

def ModelInfoAddLodinfos2(builder, lodinfos2):
    builder.PrependUOffsetTRelativeSlot(2, number_types.UOffsetTFlags.py_type(lodinfos2), 0)

def AddLodinfos2(builder, lodinfos2):
    ModelInfoAddLodinfos2(builder, lodinfos2)

def ModelInfoStartLodinfos2Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLodinfos2Vector(builder, numElems: int) -> int:
    return ModelInfoStartLodinfos2Vector(builder, numElems)

def ModelInfoAddA4(builder, a4):
    builder.PrependUOffsetTRelativeSlot(3, number_types.UOffsetTFlags.py_type(a4), 0)

def AddA4(builder, a4):
    ModelInfoAddA4(builder, a4)

def ModelInfoStartA4Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartA4Vector(builder, numElems: int) -> int:
    return ModelInfoStartA4Vector(builder, numElems)

def ModelInfoAddSubMeshes(builder, subMeshes):
    builder.PrependUOffsetTRelativeSlot(4, number_types.UOffsetTFlags.py_type(subMeshes), 0)

def AddSubMeshes(builder, subMeshes):
    ModelInfoAddSubMeshes(builder, subMeshes)

def ModelInfoStartSubMeshesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSubMeshesVector(builder, numElems: int) -> int:
    return ModelInfoStartSubMeshesVector(builder, numElems)

def ModelInfoAddA6(builder, a6):
    builder.PrependUOffsetTRelativeSlot(5, number_types.UOffsetTFlags.py_type(a6), 0)

def AddA6(builder, a6):
    ModelInfoAddA6(builder, a6)

def ModelInfoStartA6Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartA6Vector(builder, numElems: int) -> int:
    return ModelInfoStartA6Vector(builder, numElems)

def ModelInfoAddBonesToWeightIndices(builder, bonesToWeightIndices):
    builder.PrependUOffsetTRelativeSlot(6, number_types.UOffsetTFlags.py_type(bonesToWeightIndices), 0)

def AddBonesToWeightIndices(builder, bonesToWeightIndices):
    ModelInfoAddBonesToWeightIndices(builder, bonesToWeightIndices)

def ModelInfoStartBonesToWeightIndicesVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartBonesToWeightIndicesVector(builder, numElems: int) -> int:
    return ModelInfoStartBonesToWeightIndicesVector(builder, numElems)

def ModelInfoAddDeformBoneBoundaryBox(builder, deformBoneBoundaryBox):
    builder.PrependUOffsetTRelativeSlot(7, number_types.UOffsetTFlags.py_type(deformBoneBoundaryBox), 0)

def AddDeformBoneBoundaryBox(builder, deformBoneBoundaryBox):
    ModelInfoAddDeformBoneBoundaryBox(builder, deformBoneBoundaryBox)

def ModelInfoStartDeformBoneBoundaryBoxVector(builder, numElems):
    return builder.StartVector(24, numElems, 4)

def StartDeformBoneBoundaryBoxVector(builder, numElems: int) -> int:
    return ModelInfoStartDeformBoneBoundaryBoxVector(builder, numElems)

def ModelInfoAddA9(builder, a9):
    builder.PrependStructSlot(8, number_types.UOffsetTFlags.py_type(a9), 0)

def AddA9(builder, a9):
    ModelInfoAddA9(builder, a9)

def ModelInfoAddA10(builder, a10):
    builder.PrependUOffsetTRelativeSlot(9, number_types.UOffsetTFlags.py_type(a10), 0)

def AddA10(builder, a10):
    ModelInfoAddA10(builder, a10)

def ModelInfoAddA11(builder, a11):
    builder.PrependStructSlot(10, number_types.UOffsetTFlags.py_type(a11), 0)

def AddA11(builder, a11):
    ModelInfoAddA11(builder, a11)

def ModelInfoAddA12(builder, a12):
    builder.PrependFloat32Slot(11, a12, 0.0)

def AddA12(builder, a12):
    ModelInfoAddA12(builder, a12)

def ModelInfoAddA13(builder, a13):
    builder.PrependFloat32Slot(12, a13, 0.0)

def AddA13(builder, a13):
    ModelInfoAddA13(builder, a13)

def ModelInfoAddA14(builder, a14):
    builder.PrependFloat32Slot(13, a14, 0.0)

def AddA14(builder, a14):
    ModelInfoAddA14(builder, a14)

def ModelInfoAddA15(builder, a15):
    builder.PrependFloat32Slot(14, a15, 0.0)

def AddA15(builder, a15):
    ModelInfoAddA15(builder, a15)

def ModelInfoAddA16(builder, a16):
    builder.PrependFloat32Slot(15, a16, 0.0)

def AddA16(builder, a16):
    ModelInfoAddA16(builder, a16)

def ModelInfoAddA17(builder, a17):
    builder.PrependFloat32Slot(16, a17, 0.0)

def AddA17(builder, a17):
    ModelInfoAddA17(builder, a17)

def ModelInfoAddA18(builder, a18):
    builder.PrependFloat32Slot(17, a18, 0.0)

def AddA18(builder, a18):
    ModelInfoAddA18(builder, a18)

def ModelInfoAddA19(builder, a19):
    builder.PrependFloat32Slot(18, a19, 0.0)

def AddA19(builder, a19):
    ModelInfoAddA19(builder, a19)

def ModelInfoAddA20(builder, a20):
    builder.PrependFloat32Slot(19, a20, 0.0)

def AddA20(builder, a20):
    ModelInfoAddA20(builder, a20)

def ModelInfoAddA21(builder, a21):
    builder.PrependInt8Slot(20, a21, 0)

def AddA21(builder, a21):
    ModelInfoAddA21(builder, a21)

def ModelInfoAddA22(builder, a22):
    builder.PrependInt8Slot(21, a22, 0)

def AddA22(builder, a22):
    ModelInfoAddA22(builder, a22)

def ModelInfoAddA23(builder, a23):
    builder.PrependInt8Slot(22, a23, 0)

def AddA23(builder, a23):
    ModelInfoAddA23(builder, a23)

def ModelInfoAddA24(builder, a24):
    builder.PrependInt8Slot(23, a24, 0)

def AddA24(builder, a24):
    ModelInfoAddA24(builder, a24)

def ModelInfoAddA25(builder, a25):
    builder.PrependInt8Slot(24, a25, 0)

def AddA25(builder, a25):
    ModelInfoAddA25(builder, a25)

def ModelInfoAddA26(builder, a26):
    builder.PrependInt8Slot(25, a26, 0)

def AddA26(builder, a26):
    ModelInfoAddA26(builder, a26)

def ModelInfoAddA27(builder, a27):
    builder.PrependInt8Slot(26, a27, 0)

def AddA27(builder, a27):
    ModelInfoAddA27(builder, a27)

def ModelInfoAddA28(builder, a28):
    builder.PrependInt8Slot(27, a28, 0)

def AddA28(builder, a28):
    ModelInfoAddA28(builder, a28)

def ModelInfoAddA29(builder, a29):
    builder.PrependInt8Slot(28, a29, 0)

def AddA29(builder, a29):
    ModelInfoAddA29(builder, a29)

def ModelInfoAddA30(builder, a30):
    builder.PrependInt8Slot(29, a30, 0)

def AddA30(builder, a30):
    ModelInfoAddA30(builder, a30)

def ModelInfoAddA31(builder, a31):
    builder.PrependInt8Slot(30, a31, 0)

def AddA31(builder, a31):
    ModelInfoAddA31(builder, a31)

def ModelInfoAddA32(builder, a32):
    builder.PrependInt8Slot(31, a32, 0)

def AddA32(builder, a32):
    ModelInfoAddA32(builder, a32)

def ModelInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return ModelInfoEnd(builder)
